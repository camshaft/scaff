#!/usr/bin/env node

/**
 * Module dependencies.
 */

var scaff = require('commander')
  , join = require('path').join
  , async = require('async')
  , util = require("../lib/util");

scaff
  .version(require(join(__dirname, "../package.json")).version)
  .option('-d, --directory <path>', 'output directory', process.cwd())
  .option('-t, --template <path>', 'template path');

/**
 * Creator
 */
scaff
  .command("new <name>")
  .description("creates a new app")
  .action(function(name) {
    // Sanitize the name
    name = name
            .replace("/", "-")
            .replace("\\", "-")
            .replace(" ", "-");

    // Declare the project root
    var root = join(scaff.directory, name);

    async.waterfall([
      // Make sure we have a template defined
      function validate(cb) {
        cb(!scaff.template?"Error: Template name must be defined":null, scaff.template);
      },
      // Fetch the template
      function fetch(template, cb) {
        util.fetch(template, root, cb);
      },
      // Make the config
      function config(cb) {
        util.createConfig(scaff.template, root, cb);
      },
      // Pull in the template configuration
      function open(cb) {
        util.open(root, cb);
      },
      function (template, cb) {
        // While we're waiting for user input we can get a list of files in the template
        async.parallel({
          // Prompt user for questions
          prompt: function(cb2) {
            util.prompt(template, root, {project: name}, cb2);
          },
          // Get the files in the template
          files: function(cb2) {
            util.files(root, cb2);
          }
        }, cb);
      },
      // Create the files
      function create(results, cb) {
        var files = results.files;
        util.create(root,
                    files[0], // contentPath
                    files[1], // files
                    files[2], // directories
                    results.prompt, // user responses
                    cb);
      }
    ], end);
  });


/**
 * Generator
 */
scaff
  .command("generate <generator> [args]")
  .description("creates a new app")
  .action(function(generator) {
    // generate(generator)
    console.log(scaff.args);
  });

/**
 * Print out errors
 */
function end(err, result) {
  if (err && typeof err != "number") {
    console.error(err.toString());
    process.exit(1);
  }
  if (err) process.exit(err);
  
  if (result) console.log(result);
  process.exit(0);
};

scaff.parse(process.argv);
